#---
# (c) Hacene Ouzia, UPMC 2016
#-------------------------------

reset;

#---- Options

option solver knitro;
option knitro_options "alg=1 ma_terminate=1 ma_maxtime_cpu=60 ma_maxtime_real=60";

#----Output filename
param OUTPUTFILE symbolic;
let OUTPUTFILE := 'logsampl_baron_knitro.txt';

#---- Instances
param nbrInstances := 1;

set Instances default {};
let Instances := {"data-1/1/a05130"};
# OTHER FILES CANNOT BE SOLVED WITH DEMO VERSION: too much data!

#---- For logs
param Nrows {1 .. nbrInstances};
param Ncols {1 .. nbrInstances};

#param POpt {1 .. nbrInstances};
#param PTime {1 .. nbrInstances};
param MOpt {1 .. nbrInstances};
param MTime {1 .. nbrInstances};
param KnitroOpt {1 .. nbrInstances};
param KnitroTime {1 .. nbrInstances};
#param LOpt {1 .. nbrInstances};
#param LTime {1 .. nbrInstances};

param NumInstance integer default 0;

#---- Log headings
printf "# Experience : Resolution (M)\n" >> (OUTPUTFILE);
printf "# Solver     : baron et knitro \n" >> (OUTPUTFILE);
printf "# Maxtime    : 2 heures \n\n" >> (OUTPUTFILE);

printf "#Knitro:\t%4s %4s %12s %12s\n", 'M', 'N', 'M_OPT', 'M_TIME' >> (OUTPUTFILE);

#---- Defining models
model models.mod;
#problem P: x, agents_capacities, tasks_to_agents, Objective;
problem Mprob: x, agents_capacities_M, cap_M, tasks_to_agents, Objective;
#problem L: x, z, agents_capacities_lin, tasks_to_agents, cap_lin, lin_const1, lin_const2, lin_const3, Objective;

#---- Solving problems
for{file in Instances}{

   let NumInstance := NumInstance + 1;

   if NumInstance > 1 then reset data M, N, c, a, b;

   #------
   # Read data from .txt file
   #-------------------------
   read M, N < (file);
   for {i in I}{
   	read {j in J} (c[i,j]) < (file);
   }
   for {i in I}{
   	read {j in J} (a[i,j]) < (file);
   }
   read {i in I} (b[i]) < (file);

   let Nrows[NumInstance] := M;
   let Ncols[NumInstance] := N;
   
    printf "C matrix\n";
	for{i in I} {
		for{j in J} {
			printf '%.2f\t', c[i,j];
		}
		printf "\n";
	}
   printf "\n";
   
   printf "a matrix\n";
	for{i in I} {
		for{j in J} {
			printf '%.2f\t', a[i,j];
		}
		printf "\n";
	}
   printf "\n";
   
   printf "b matrix\n";
	for{i in I} {
		printf '%.2f\n', b[i];
	}
   printf "\n";
 
 
   reset data x;
   

   #------
   # Solve the auxiliary problem (M) with baron
   #------------------------------
   solve Mprob; printf "(M) problem solved with baron ... \n\n";
	for{i in I} {
		for{j in J} {
			printf '%.2f\t', x[i,j];
		}
		printf "\n";
	}
   printf "\n";

   let    MOpt[NumInstance] := Objective.val;
   let   MTime[NumInstance] := _solve_time;
   
   #-- Logs ...
   printf "\t\t%4d %4d %12.3f %12.3f \n", Nrows[NumInstance], Ncols[NumInstance], MOpt[NumInstance], MTime[NumInstance] >> (OUTPUTFILE);
   
   
   printf "\n#Baron:%4s %4s %12s %12s\n", 'M', 'N', 'M_OPT', 'M_TIME' >> (OUTPUTFILE);
   
   #------
   # Solve the auxiliary problem (M) with knitro
   #------------------------------   
   reset data x;

	#---- Options

	option solver baron;
	option baron_options "maxtime=60";
	
	solve Mprob; printf "(M) problem solved with knitro ... \n\n";
	for{i in I} {
		for{j in J} {
			printf '%.2f\t', x[i,j];
		}
		printf "\n";
	}
   printf "\n";

   let   KnitroOpt[NumInstance] := Objective.val;
   let   KnitroTime[NumInstance] := _solve_time;
   
   #-- Logs ...
   printf "\t\t%4d %4d %12.3f %12.3f \n", Nrows[NumInstance], Ncols[NumInstance], KnitroOpt[NumInstance], KnitroTime[NumInstance] >> (OUTPUTFILE);
   
   

}

printf "\n" >> (OUTPUTFILE);
